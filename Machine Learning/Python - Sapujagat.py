# -*- coding: utf-8 -*-
"""Untitled0 (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uiIQvCIrE1w3dr4INGDy6lodsFuEqh8d

# SapuJagat - JagatScan
## Deteksi Jenis Sampah Menggunakan YOLOv8

### Dibuat oleh:
- Nama     : Muhammad Rizki Putra, Nadia Alzena Zahrani, Siti Arfah Hamidah
- Instansi : Universitas Padjadjaran, Universitas Brawijaya, Institut Pendidikan Garut
- Tanggal  : 13/06/2025

---

## Tujuan
- Membuat model deteksi objek untuk klasifikasi jenis sampah.
- Implementasi YOLOv8 untuk mendukung sistem JagatScan.
- Mempersiapkan model untuk integrasi ke aplikasi berbasis web.

---

## Dataset
Dataset terdiri dari beberapa kategori sampah:
- Daun
- Kaca
- Karet
- Kayu
- Kertas
- Logam
- Plastik
- Styrofoam
- Tekstil
- Sisa Makanan

---

## Teknologi
- [Roboflow](https://app.roboflow.com/cc25cf145/sapujagat) (untuk pembuatan dataset serta preprocessing)
- Python (Google Colab)
- YOLOv8 (Ultralytics)
- TensorFlow.js (untuk deployment web)

---

## Alur Proyek
1. Persiapan Dataset
2. Training Model YOLOv8
3. Evaluasi Model
4. Inference Model
5. Export Model ke TensorFlow.js

---

## Export Model
Model dapat diekspor ke:
- `best_saved_model/` → untuk TensorFlow SavedModel
- `best_web_model/` → untuk TensorFlow.js (frontend)

---

## Contoh Prediksi
- Input: Gambar objek sampah
- Output: Bounding Box + Label + Confidence

---

## Lisensi
Proyek ini menggunakan lisensi [MIT](LICENSE)

# Install Libraries
"""

!nvidia-smi
!pip install roboflow
!pip install ultralytics

"""# Import Library"""

import ultralytics
ultralytics.checks()
from ultralytics import YOLO
from IPython.display import Image

"""# Data loading"""

from roboflow import Roboflow
rf = Roboflow(api_key="PKpcGmbYZkw68ZTHLcoa")
project = rf.workspace("cc25cf145").project("sapujagat")
version = project.version(8)
dataset = version.download("yolov8")
dataset.location

"""# Pembuatan model

Berikut adalah penjelasan lengkap dari parameter yang digunakan pada proses training model YOLOv8:

| Parameter        | Deskripsi                                                                                   |
|------------------|---------------------------------------------------------------------------------------------|
| `YOLO('yolov8s.pt')` | Memuat model YOLOv8 versi **small** (`s`) dengan bobot pre-trained dari Ultralytics. Cocok untuk balancing antara akurasi dan kecepatan. |
| `data`           | Path ke file **`data.yaml`** yang berisi konfigurasi dataset, termasuk lokasi gambar, label, dan daftar nama kelas. |
| `epochs`         | Jumlah **epoch** atau iterasi penuh terhadap seluruh dataset selama proses training. Semakin besar → potensi akurasi meningkat, tapi waktu training bertambah. |
| `imgsz`          | **Ukuran gambar** input. Semua gambar akan di-resize menjadi resolusi **640x640 piksel** sebelum masuk ke model. |
| `lr0`            | **Learning rate awal**. Mengatur seberapa besar perubahan bobot pada setiap iterasi training. Nilai terlalu besar → training bisa tidak stabil; terlalu kecil → training lambat. |
| `batch`          | Jumlah gambar yang diproses dalam satu batch selama training. Semakin besar batch → semakin efisien (jika hardware mendukung), tapi butuh memori lebih banyak. |
| `warmup_epochs`  | Jumlah epoch awal untuk **warmup**. Warmup digunakan agar model belajar secara perlahan sebelum masuk ke learning rate normal → mencegah model learning terlalu cepat di awal yang bisa menyebabkan overfitting atau loss tidak stabil. |
"""

model = YOLO('yolov8s.pt')

model.train(
    data=dataset.location + '/data.yaml',
    epochs=20,
    imgsz=640,
    lr0=0.01,
    batch=16,
    warmup_epochs=3,
)

model.val()

"""## 📊 Hasil Evaluasi Model

### 🔧 Model Summary
- **Jumlah Layers**: 72
- **Jumlah Parameter**: 11,129,454
- **Gradien**: 0 (sudah fused/optimized)
- **GFLOPs (Floating Point Operations)**: 28.5 → menunjukkan kompleksitas komputasi model

---

### 🏷️ Evaluasi Performa (Validation Results)

| **Metrik**     | **Deskripsi**                                                                                 |
|----------------|-----------------------------------------------------------------------------------------------|
| **P (Precision)** | Kemampuan model mendeteksi objek dengan benar (minim false positive).                       |
| **R (Recall)**    | Kemampuan model menemukan semua objek yang ada (minim false negative).                      |
| **mAP50**         | **Mean Average Precision @IoU 0.5**. Semakin tinggi → semakin baik performa deteksi.        |
| **mAP50-95**      | Rata-rata **mAP** pada variasi IoU 0.5 sampai 0.95 → metrik yang lebih ketat dan akurat.   |

---

### 📁 Ringkasan Hasil

| **Kelas**        | **Precision (P)** | **Recall (R)** | **mAP50** | **mAP50-95** |
|------------------|------------------:|---------------:|----------:|-------------:|
| **all**          |            0.802  |         0.733  |     0.812 |        0.594 |
| Daun             |            0.840  |         0.695  |     0.783 |        0.444 |
| Kaca             |            0.680  |         0.947  |     0.842 |        0.650 |
| Karet            |            0.681  |         0.656  |     0.747 |        0.565 |
| Kayu             |            0.893  |         0.654  |     0.796 |        0.424 |
| Kertas           |            0.884  |         0.573  |     0.810 |        0.692 |
| Logam            |            0.781  |         0.483  |     0.591 |        0.445 |
| Plastik          |            0.714  |         0.847  |     0.836 |        0.681 |
| Styrofoam        |            0.894  |         0.941  |     0.963 |        0.835 |
| Tekstil          |            0.873  |         0.931  |     0.962 |        0.805 |
| sisaMakanan      |            0.784  |         0.604  |     0.785 |        0.399 |

---

### ⚡ Kecepatan Inference

| Tahap         | Waktu per Gambar |
|---------------|------------------|
| **Preprocess**   | 0.2 ms          |
| **Inference**    | 4.7 ms          |
| **Loss**         | 0.0 ms          |
| **Postprocess**  | 4.6 ms          |

⏱️ **Total waktu prediksi per gambar ≈ 9.5 ms**

---

### 📌 Insight
- **Kelas dengan mAP tertinggi**: `Styrofoam`, `Tekstil`
- **Kelas yang perlu perbaikan**: `sisaMakanan`, `Kayu` → kemungkinan butuh lebih banyak data atau augmentasi lebih baik

"""

model = YOLO('/content/runs/detect/train5/weights/best.pt')

"""# Melakukan Inference gambar"""

# Predict on an image
results = model.predict(source='/content/dn2.png', conf=0.25)

# Show the result
results[0].show()

# Predict on an image
results = model.predict(source='/content/st0.jpg', conf=0.25)

# Show the result
results[0].show()

# Predict on an image
results = model.predict(source='/content/pl.jpg', conf=0.25)

# Show the result
results[0].show()

"""# Export ke format tfjs"""

model.export(format='tfjs')

# Ganti path di bawah ini dengan path yang Anda salin
path_ke_folder = '/content/runs/detect/train5/weights/best_web_model'

# Perintah ini akan membuat file zip di direktori utama /content/
!zip -r /content/tfjs_model.zip {path_ke_folder}

!pip freeze > requirements.txt